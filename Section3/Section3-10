udemy [現役シリコンバレーエンジニアが教えるGo入門＋応用でビットコインのシストレFintechアプリの開発]

第15回　スライス
//codeは別ファイルにて管理（どうせあげられないし）

スライスの宣言：
    スライスは、宣言の仕方で言うと配列と変わらない。
    要素数を指定しない配列＝スライスと受け取って問題ない。(セクションを跨ぐ必要あるのか・・・)

いろんなインデックスの呼び出し方：
    配列やスライスのインデックスについて、様々な方法で呼び出すことができる。

    ex)
	var n []int = []int{1, 2, 3, 4, 5, 6}
	fmt.Println(n)  //全て表示される
	fmt.Println(n[2])   //3が表示される
	fmt.Println(n[2:4]) //3と4が表示される。インデックスの2〜3が表示されている点に注意。
	fmt.Println(n[:2])  //1と2が表示される。インデックスの0〜1が表示されている点に注意。
	fmt.Println(n[2:])  //3 4 5 6が表示される。

スライスの入れ子構造：
    スライスの中にスライスを入れることも可能。なんに使うかは不明。

    ex)
	var board = [][]int{
		[]int{0, 1, 2},
		[]int{3, 4, 5},
		[]int{6, 7, 8},
	}

	fmt.Println(board) // [[0 1 2][3 4 5][6 7 8]]と表示される

appendで要素を追加：
    スライスはappendで要素を追加することができる。
    append(スライス名,値)   //カンマで区切ることで値を複数追加することも可能

    ex)
	var n []int = []int{1, 2, 3, 4, 5, 6}
    n = append(n,100,200)
    fmt.println(n)  //1 2 3 4 5 6 100 200と表示される

