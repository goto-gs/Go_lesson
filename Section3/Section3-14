udemy [現役シリコンバレーエンジニアが教えるGo入門＋応用でビットコインのシストレFintechアプリの開発]

第19回　関数
//codeは別ファイルにて管理（どうせあげられないし）

関数の作成：
    go言語では、関数は func を用いて宣言する。この時、値の受け渡しが必要であれば引数と型を設定。
    結果を戻す必要があれば、戻り値の型を設定しておく。

    func 関数名 (引数名 引数の型) 戻り値の型{
        実行する内容
    } 

関数の呼び出し：
    作成した関数は、呼び出された時に実行される。

    ex)
    func funcLesson() {
        r := add(10, 20)   // 10と20の値を持ってaddを実行。結果を変数 r に格納
        fmt.Println(r)  // 30 が表示される
    }

    func add(x int, y int) int {
        return x + y    //戻り値として x + y の結果を返す
    }

複数の引数、戻り値を持たせる：
    関数の引数や戻り値は、複数設定をすることもできる。
    戻り値の値を複数用意する場合は、戻り値の型を () で囲む必要がある点に注意すること。

    ex)
    func funcLesson() {
        r1, r2 := add2(10, 20)  // 10と20の値を持ってadd2を実行。結果をr1,r2に格納
        fmt.Println(r1, r2) // 30 -10 が表示される
    }

    func add2(x2, y2 int) (int, int) {
        return x2 + y2, x2 - y2 //戻り値として x + y の結果と、 x - y の結果を返す
    }

関数の戻り値に名前をつける：
    関数の戻り値に名前をつけることで、関数の一行目の時点でどのような戻り値が返ってくるのかわかりやすくなる。
    また、名前がついている場合、実行時に宣言文を書かずに値を格納することができる。
    さらに、return文を書く時に、名前を省略するネイキッドリターンが使える。

    func 関数名 (引数名 引数の型)(戻り値名,戻り値の型) {
        実行する内容
    } 

    ex)
    func funcLesson() {
        r3 := cal(100, 2)   // 100と2という値を持ってcal()を実行。結果をr3に格納
        fmt.Println(r3) // 200 と表示される
    }

    func cal(price, item int) (result int) {
        result = price * item   // 戻り値 result に引数 price * item の結果を格納
        return  //戻り値に名前をつけているため、自動的にresultが返される
    }
    

変数に関数を格納する：
    関数はグローバルな位置に記述するだけでなく、関数内にも記述することができる。
    また、変数に関数を格納することで、関数の結果を変数に格納することも可能。

    ex)
    func funcLesson() {
        f := func(x int) {  //変数の中に関数を記述
            fmt.Println("inner func", x)   // inner func 1 と表示される
        }
        f(1)    // 1という値を持たせて、関数を実行
    }

関数の即時実行：
    関数を定義した時に、実行文を別の行に設けず、そのまま実行させることも可能
    並列実行などを行う場合に利用される。（らしい

    ex)
    func(x int) {
		fmt.Println("inner func", x)    // inner func 1 と表示される
	}(1)    // 1 という値を持って実行

