udemy [現役シリコンバレーエンジニアが教えるGo入門＋応用でビットコインのシストレFintechアプリの開発]

第20回　クロージャー
//codeは別ファイルにて管理（どうせあげられないし）

ブレークポイントとデバッガー：
    変数の値の確認や処理の流れを確認するためにブレークポイントを使用する。
    デバッグモード中は以下のコマンドを選択することで実行の進め方を制御できる
    ・step over >> 1行を実行。関数の場合、関数の中に入らず実行する
    ・step into >> 1行ずつ実行。関数の中に入って実行する。最小単位。
    ・step out  >> 関数の外に出るまで実行。

クロージャー：
    関数が定義された環境への参照を持った関数をクロージャーという。
    
    ・・・・？

    以下の例だと、circleArea()は、戻り値である無名関数func の radius に参照でき、無名関数 func もまたcircleArea()の pi を参照できる。
    ローカル変数は本来、特定の関数内でしかスコープされないが、クロージャーを使えば入れ子になっている関数からも外のローカル変数にアクセスできる。という事だと思う。多分。

    ex)
    func circleArea(pi float64) func(radius float64) float64 {  //引数 pi を持った関数 circleArea は戻り値として、引数 radius を持った無名関数funcが設定されている
        return func(radius float64) float64 {   // circleAreaへの戻り値（return）として無名関数funcを実行。無名関数funcもまた戻り値として float64 の値が設定されている
            return pi * radius * radius //12.56が返される(3.14*2*2) この時circleArea()は無名関数funcで定義されたローカル変数 radius にアクセスできる
        }
    }

    func clojerLesson() {
        c1 := circleArea(3.14) // pi に 3.14 を持たせて、変数c1に関数を格納
        fmt.Println(c1(2))  // pi の値を引き継いだまま radius に 2 を持たせて実行し、結果を表示する。 
    }