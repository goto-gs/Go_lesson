udemy [現役シリコンバレーエンジニアが教えるGo入門＋応用でビットコインのシストレFintechアプリの開発]

第21回　可変長引数
//codeは別ファイルにて管理（どうせあげられないし）

可変長引数：
    引数は本来関数を定義したタイミングで固定の引数をもたせることが多いが、以下のように記述するともたせる引数の数を可変にすることもできる。
    func 関数名(引数名 ...型){}

    ex)
    func foo(params ...int) {   //可変長引数を持った関数 foo()
        fmt.Println(len(params), params)    //引数の長さと、値を表示
    }

    func paramLesson() {
        foo(10, 20) // 2 [10 20] が表示される
        foo(10, 20, 30) // 3 [10 20 30] が表示される
    }

 スライスや配列による可変長引数の設定：
    可変長引数を持った関数を実行する際に、持たせる引数の値をスライスや配列にすることも可能

    ex)
    func foo(params ...int) {   //可変長引数を持った関数 foo()
        fmt.Println(len(params), params)    //引数の長さと、値を表示
    }

    func paramLesson() {
        s := []int{1, 2, 3, 4}
        foo(s...)   // 4 [1 2 3 4] が表示される
    }

    配列を可変長引数に持たせる場合は、書き方がスライスと違っているので注意！

    ex)
    func foo(params ...int) {   //可変長引数を持った関数 foo()
        fmt.Println(len(params), params)    //引数の長さと、値を表示
    }

    func paramLesson() {
        arr := [3]int{1, 2, 3}
        foo(arr[0:]...)   // 3 [1 2 3] が表示される。配列のインデックス：でインデックス以降の値を展開している。
    }